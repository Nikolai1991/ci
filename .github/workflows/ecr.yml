# This workflow will build and push a new container image to Amazon ECR
on:
  push:
    paths:
    - 'CI-build-docker-image/Nginx/**'
    - '.github/workflows/**'

name: Deploy to Amazon ECR
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
          persist-credentials: false
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: github-action-nginx
      working-directory: CI-build-docker-image/Nginx/
      run: |
        GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-7)
        IMAGE_TAG=${GITHUB_SHA_SHORT:=latest}
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "::set-output name=git_commit::$GITHUB_SHA_SHORT"

    - name: Checkout canary-app repo
      uses: actions/checkout@v2
      with:
        repository: ${{ secrets.USERNAME }}/canary-app
        path: canary-app
        persist-credentials: false
    
    - name: Git init
      working-directory: canary-app/
      run: |
        git init
        git config --global user.email "${{ secrets.EMAIL }}"
        git config --global user.name "${{ secrets.USERNAME }}"
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        git remote set-url origin https://${{ secrets.USERNAME }}:${{ secrets.PASSWORD }}@github.com/${{ secrets.USERNAME }}/canary-app.git
        git pull origin dev

    # - name: Semantic Versioning
    #   uses: paulhatch/semantic-version@v3.2
    #   with:
    #     # The prefix to use to identify tags
    #     branch: "master"
    #     # The prefix to use to identify tags
    #     tag_prefix: "v"
    #     # A string which, if present in a git commit, indicates that a change represents a
    #     # major (breaking) change
    #     major_pattern: "(MAJOR)"
    #     # Same as above except indicating a minor change
    #     minor_pattern: "(MINOR)"
    #     # A string to determine the format of the version output
    #     format: "${major}.${minor}.${patch}-prerelease.${increment}"
    #     # Optional path to check for changes. If any changes are detected in the path the
    #     # 'changed' output will true. Enter multiple paths separated by spaces.
    #     change_path: "CI-build-docker-image/Nginx"
    #     # Named version, will be used as suffix for name version tag
    #     namespace: project-b
    #     # Indicate whether short tags like 'v1' should be supported. If false only full
    #     # tags like 'v1.0.0' will be recognized.
    #     short_tags: true
    #     # If this is set to true, *every* commit will be treated as a new version.
    #     bump_each_commit: false
    
    - name: Update Values files
      working-directory: canary-app/
      run: |
        sed -i 's|image:.*|image: ${{ steps.build-image.outputs.image }}|g' kubernetes-manifests/nginx-app/*.yaml
        sed -i 's|AppVersion:.*|AppVersion: commit-${{ steps.build-image.outputs.git_commit }}|g' kubernetes-manifests/nginx-app/*.yaml
        
    - name: Push files
      working-directory: canary-app/
      run: |
        git checkout dev
        git add .
        git commit -m "Github Actions Automatically Built in `date +"%Y-%m-%d %H:%M"`" 
        git push origin dev
